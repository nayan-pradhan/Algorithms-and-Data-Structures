inOrderVisit(Node n)
    if (n == NIL)
        return
    inOrderVisit(n->left)
    n.operation()
    inOrderVisit(n->right)

// recursive algoirithm
treeSearch(x, k)
    if (x == NILL) || (k = x->key)
        return x
    if k<x.key
        return treeSearch(x->left, k)
    else
        return treeSearch(x->right, k)

// iterative algoirithm
treeSearch(x, k)
    while (x != NULL || x.key != k)
        if k < x.key
            x = x->left
        else
            x = x->right
    return x

// finding minimum recursive
treeMin(x)
    while (x->left)
        return treeMin(x->left)

// finding minimum iterative 
treeMin(x)
    while (x->left != NULL)
        x = x->left
    return x

// finding maximum
treeMax(x)
    while (x->right)
        x = x->right
    return x

// finding successor
successor(x) 
    if (x->right != NULL) 
        return treeMin(x->right)
    y = x.p
    while (y!= NULL && x=y->right)
        x=y
        y=y.p
    return y

// tree insert
treeInsert(T, z)
    y = NIL 
    x = T.root
    while (x!=NIL)
        y = x
        if (z->key < x->key)
            x = x->left
        else
            x = x->right
    z->parent = y
    if (y == NILL)
        T.root = z
    else if (z->key < y->key)
        y->left = z
    else
        y->right = z

// transplant
treeTrnasplant(T, u, v)
if (u->parent = NIL)
    T.root = v 
else if (u = u->parent->left)
    u->parent->left = v 
else
    u->parent->right = v 
if v!=NIL 
    v->parent = u ->parent

// deletion
delete(T, z)
    if (z->left == NIL)
        transplant(T, z, z->right)
    else if (z->right == NIL)
        transplant(T, z, z->left)
    else 
        y = treeMinimum(z->right)
        if (y->parent != z) 
            transplant(T, y, y->right)
            y->right = z->right
            y->right->parent = y
        transplant(T, z, z->right)
        y->left = z->left
        y->left->parent = y