Greedy Method
    -> one can use it
    -> fractional greedy works best
    -> still not always relabible
    -> dynamic programming is recommended

Dynamic programming approach:

Our sack has maximum weight capacity wSack
We have items each of with with weight w[i] and profit of p[i] -> item(w, p)
Our dynamic matrix table is called V 

knapSack(S)
    for i = 0 to p 
        V[0, i] = 0
    for j = 0 to w 
        V[j, 0] = 0
    for i = 1 to p 
        for j = 1 to w 
            if w[i] > wSack // cannot be part of solution
                V[i, j] = V[i-1, j]
            else 
                if V[i-1, j] > V[i-1, wSack-w[i]] + p[i]
                    V[i, j] = V[i-1, j]
                else
                    V[i, j] = V[i-1, wSack - w[i]] + p[i]