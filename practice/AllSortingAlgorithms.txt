
// Insertion Sort //

insertionSort(Array)
    for j = 2 to Array.length()
        key = Array[j]
        i = j - 1
        while (i > 0 && Array[i] > key)
            Array[i+1] = Array[i]
            i--
        Array[i+1] = key

-------------------------------------------------------------------------------

// Selection Sort //

selectionSort(A, n)
for i = 1 to n
    min = i
    for j = i+1 to n
        if (A[j] < A[min])
            min = j
    if (min != i) 
        swap (A[i], A[min])

-------------------------------------------------------------------------------

// Merge Sort //

mergeSort(Array, p, r)
    if (p < r)
        q = (p+r)/2
        mergeSort(Array, p, q)
        mergeSort(Array, q+1, r)
        merge (Array, p, q, r)

merge(Array, p, q, r)
    n1 = q-p+1
    n2 = r-q
    make list L[1..n1+1] and R[1..n2+1]
    for i = 1 to n1
        L[i] = Array[p+i-1]
    for j = 1 to n2
        R[j] = Array[q+j]
    L[n1+1] = infinity
    R[n2+1] = infinity
    i = 1
    j = 1
    for k = p to r 
        if L[i] <= R[j]
            Array[k] = L[i]
            i++
        else
            Array[k] = R[j]
            j++

-------------------------------------------------------------------------------

// Heap Sort //

heapSort(A)
    buildMaxHeap(A)
    for (j = A.length downto 2)
        swap A[j] and A[1]
        A.heapSize--
        maxHeapify(A, j)

buildMaxHeap(A)
    n = A.length
    for (i = floor(n/2) down to 1)
        maxHeapify(A, i)

maxHeapify(A, i)
    l = left(i)
    r = right(i)
    if l<=A.length && A[l] > A[i]
        largest = l 
    else 
        largest = i 
    else if r<=A.length && A[r] > A[largest]
        largest = r 
    if largest != i 
        swap A[i] and A[largest]
        maxHeapify(A, largest)

-------------------------------------------------------------------------------

// Quick Sort // 

QuickSort(A, p, r)(
    while p < r 
        q = Partation(A, p, r)
        QuickSort(A, p, q-1)
        QuickSort(A, q+1, r)
        
partation(A, p, r)
    x = A[p]
    i = p 
    for j = i+1 to r 
        if A[j] < x 
            i++
            swap A[i] and A[j]
    swap x and A[i]
    return i

-------------------------------------------------------------------------------

// Random Quick Sort //

QuickSort(A, p, r)
    while p < r 
        q = RandomPartation(A, p, r)
        QuickSort (A, p, q-1)
        QuickSort (A, q+1, r)

RandomPartation(A, p, r)
    temp = random number between p and r 
    swap A[p] and A[temp]
    return Partation(A, p, r)

Partation(A, p, r)
    x = A[p]
    i = p 
    for j = i+1 to r 
        if A[j] < x 
            i++ 
            swap A[i] and A[j]
    swap A[i] and x
    return i

-------------------------------------------------------------------------------

// Bubble Sort //

BubbleSort(A)
    for i = 1 to A.length-1
        for j = A.length to i+1
            if A[j] < A[j-1]
                swap A[j] and A[j-1]

-------------------------------------------------------------------------------

// Counting Sort //

input array A, output array B, and auxiliary array C
n = A.length, k = largest integer in array

CountingSort(A)
    for i = 1 to k
        C[k] = 0
    for j = 1 to n 
        C[A[j]] = C[A[j]] + 1
    for i = 2 to k 
        C[i] = C[i] + C[i-1]
    for j = n downto 1
        B[C[A[j]]] = A[j]
        C[A[j]] = C[A[j]] - 1

-------------------------------------------------------------------------------

// Radix Sort //

RadixSort (A, d)
    for i = 1 to d 
        use a stable sort to sort array A on digit i

-------------------------------------------------------------------------------

// Bucket Sort // 

BucketSort(A)
    n = A.length 
    for i = 0 to n-1
        make B[i] an empty list 
    for i = 1 to n 
        insert A[i] into list B[n*A[i]]
    for i = 0 to n-1
        sort B[i] using insertionSort (or any other sorting algorithm)
    concatinate and merge B[1], B[2] ... B[n-1] in order